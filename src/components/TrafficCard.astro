<div class="traffic-card-wrapper">
  <div class="card-container">
    <div class="card">
      <div class="chart-area">
        <div class="grid-lines">
          <div class="grid-line"></div>
          <div class="grid-line"></div>
          <div class="grid-line"></div>
          <div class="grid-line"></div>
        </div>
        
        <div class="chart-line">
          <svg width="100%" height="100%" viewBox="0 0 280 100">
            <path class="animated-path" id="trafficChartPath" d="M0,20 L20,18 L40,30 L60,28 L80,45 L100,42 L120,65 L140,62 L160,85 L180,82 L200,100 L220,95 L240,75 L260,78 L280,25"/>
          </svg>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .traffic-card-wrapper {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #1a3b47, #2c5a6b);
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 7px 7px 0px 0px;
  }

  .card-container {
    perspective: 1000px;
    width: 70%;
  }

  .card {
    width: 100%;
    height: 160px;
    background: linear-gradient(135deg, #4a7c8a, #6ba0b0);
    border-radius: 7px;
    position: relative;
    transform: rotateX(10deg) rotateY(-5deg);
    box-shadow: 
      0 20px 40px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
    overflow: hidden;
  }

  .card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, 
      rgba(255, 255, 255, 0.1) 0%, 
      rgba(255, 255, 255, 0.05) 50%, 
      rgba(255, 255, 255, 0.02) 100%);
    border-radius: 16px 16px 0 0;
  }

  .chart-area {
    position: absolute;
    top: 22px;
    bottom: 0;
    left: 20px;
    right: 20px;
  }

  .grid-lines {
    position: absolute;
    top: 10px;
    left: 0;
    right: 0;
    bottom: 0;
  }

  .grid-line {
    position: absolute;
    left: 0;
    right: 0;
    height: 1px;
    background: rgba(0, 255, 200, 0.2);
  }

  .grid-line:nth-child(1) { top: 0; }
  .grid-line:nth-child(2) { top: 25%; }
  .grid-line:nth-child(3) { top: 50%; }
  .grid-line:nth-child(4) { top: 75%; }

  .chart-line {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    width: 100%;
    height: 100%;
  }

  .animated-path {
    fill: none;
    stroke: #ff4444;
    stroke-width: 3;
    stroke-linecap: round;
    stroke-linejoin: round;
    filter: drop-shadow(0 0 6px rgba(255, 68, 68, 0.6));
    opacity: 0;
  }
</style>

<script>
  function initializeAnimation() {
    const pathElement = document.getElementById('trafficChartPath');
    if (pathElement instanceof SVGPathElement) {
      const path = pathElement;
      const pathLength = path.getTotalLength();
      
      // Set initial state
      path.style.strokeDasharray = `${pathLength} ${pathLength}`;
      path.style.strokeDashoffset = `${pathLength}`;
      
      // Start animation
      requestAnimationFrame(() => {
        // Make the path visible
        path.style.opacity = '1';
        path.style.transition = 'stroke-dashoffset 1.26s cubic-bezier(0.2, 0, 0.8, 1), opacity 0.1s ease';
        path.style.strokeDashoffset = '0';
        
        // Start color transition after path animation
        setTimeout(() => {
          const startColor = '#ff4444';
          const endColor = '#00ffc8';
          let currentFrame = 0;
          const totalFrames = 60;
          
          const interpolateColor = (color1: string, color2: string, factor: number) => {
            const r1 = parseInt(color1.slice(1, 3), 16);
            const g1 = parseInt(color1.slice(3, 5), 16);
            const b1 = parseInt(color1.slice(5, 7), 16);
            
            const r2 = parseInt(color2.slice(1, 3), 16);
            const g2 = parseInt(color2.slice(3, 5), 16);
            const b2 = parseInt(color2.slice(5, 7), 16);
            
            const r = Math.round(r1 + (r2 - r1) * factor);
            const g = Math.round(g1 + (g2 - g1) * factor);
            const b = Math.round(b1 + (b2 - b1) * factor);
            
            return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
          };
          
          const colorTransition = () => {
            if (currentFrame <= totalFrames) {
              const progress = currentFrame / totalFrames;
              // Use easing function for smoother transition
              const easedProgress = progress < 0.5 
                ? 2 * progress * progress 
                : 1 - Math.pow(-2 * progress + 2, 2) / 2;
              
              const currentColor = interpolateColor(startColor, endColor, easedProgress);
              
              // Convert hex to RGB for drop-shadow
              const r = parseInt(currentColor.slice(1, 3), 16);
              const g = parseInt(currentColor.slice(3, 5), 16);
              const b = parseInt(currentColor.slice(5, 7), 16);
              
              path.style.stroke = currentColor;
              path.style.filter = `drop-shadow(0 0 6px rgba(${r}, ${g}, ${b}, 0.6))`;
              
              currentFrame++;
              requestAnimationFrame(colorTransition);
            }
          };
          
          colorTransition();
        }, 1250);
      });
    }
  }

  // Function to set final state immediately
  function setFinalState() {
    const pathElement = document.getElementById('trafficChartPath');
    if (pathElement instanceof SVGPathElement) {
      const path = pathElement;
      const pathLength = path.getTotalLength();
      
      // Set final state immediately
      path.style.opacity = '1';
      path.style.strokeDasharray = `${pathLength} ${pathLength}`;
      path.style.strokeDashoffset = '0';
      path.style.transition = 'none';
      path.style.stroke = '#00ffc8';
      path.style.filter = 'drop-shadow(0 0 6px rgba(0, 255, 200, 0.6))';
    }
  }

  // Function to reset animation
  function resetAnimation() {
    const pathElement = document.getElementById('trafficChartPath');
    if (pathElement instanceof SVGPathElement) {
      const path = pathElement;
      const pathLength = path.getTotalLength();
      
      path.style.opacity = '0';
      path.style.strokeDasharray = `${pathLength} ${pathLength}`;
      path.style.strokeDashoffset = `${pathLength}`;
      path.style.transition = 'none';
      path.style.stroke = '#ff4444';
      path.style.filter = 'none';
    }
  }

  // Function to set up hover event listener
  function setupHoverListener() {
    const card = document.querySelector('.traffic-card-wrapper');
    if (card) {
      card.addEventListener('mouseenter', () => {
        resetAnimation();
        setTimeout(initializeAnimation, 100);
      });
    }
  }

  // Handle initial page load
  window.addEventListener('load', () => {
    setFinalState();
    setupHoverListener();
  });

  // Handle navigation events
  document.addEventListener('astro:page-load', () => {
    setFinalState();
    setupHoverListener();
  });
</script>